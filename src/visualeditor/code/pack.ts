import JSZip from 'jszip';
import { uniq, zipObject } from 'lodash-es';
import { CodeImportPrepare, CodePrepare } from '../store/node';

export async function packRepo(options: {
  projectName?: string;
  code: string;
  prepares: CodePrepare[];
  platform?: 'web' | 'nodejs';
}): Promise<Blob> {
  const {
    projectName = 'codeck-project',
    code,
    prepares,
    platform = 'web',
  } = options;

  const zip = new JSZip();
  const repo = zip.folder(projectName);
  if (!repo) {
    throw new Error('Zip folder create error');
  }
  const dependencies = await getAllDependencies(prepares);

  repo.file(
    'README.md',
    `## ${projectName}

Generate by [codeck](https://codeck.moonrailgun.com/)

### Usage

\`\`\`bash
npm install
npm start
\`\`\`
`
  );
  repo.file('index.js', code);

  if (platform === 'web') {
    repo.file(
      'index.html',
      `<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>${projectName}</title>
  </head>
  <body>
    <div id="root">
      <div>This project is generated by codeck</div>
      <ul id="console-log"></ul>
    </div>
    <script type="application/javascript" src="//cdn.rawgit.com/Alorel/console-log-html/master/console-log-html.min.js"></script>
    <script>
      ConsoleLogHTML.connect(document.getElementById("console-log"));
    </script>
    <script type="module" src="./index.js"></script>
  </body>
</html>`
    );
    repo.file(
      'package.json',
      JSON.stringify(
        {
          name: projectName,
          private: true,
          version: '1.0.0',
          description: 'Generated by codeck',
          main: 'index.js',
          scripts: {
            start: 'vite',
            build: 'vite dev',
          },
          keywords: ['codeck'],
          dependencies: {
            ...dependencies,
            vite: '3.2.5',
          },
        },
        null,
        2
      )
    );
  } else if (platform === 'nodejs') {
    repo.file(
      'package.json',
      JSON.stringify(
        {
          name: projectName,
          private: true,
          version: '1.0.0',
          description: 'Generated by codeck',
          main: 'index.js',
          scripts: {
            start: 'node index.js',
          },
          keywords: ['codeck'],
          dependencies,
        },
        null,
        2
      )
    );
  }

  const content = zip.generateAsync({ type: 'blob' });

  return content;
}

async function getAllDependencies(
  prepares: CodePrepare[]
): Promise<Record<string, string>> {
  const modules = uniq(
    prepares
      .filter((p): p is CodeImportPrepare => p.type === 'import')
      .map((p) => p.module)
  );

  const versions = await Promise.all(
    modules.map((module) => fetchModuleLatestVersion(module))
  );

  return zipObject(modules, versions);
}

/**
 * 获取npm包最新版本号
 */
async function fetchModuleLatestVersion(packageName: string) {
  const res = await fetch(`https://registry.npmjs.org/${packageName}/latest`);
  const json = await res.json();

  return json.version || '*';
}
